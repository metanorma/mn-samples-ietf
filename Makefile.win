#!make
SHELL := cmd
# Ensure the xml2rfc cache directory exists locally
IGNORE := $(shell md $(USERPROFILE)\.cache\xml2rfc)

SRC := $(lastword $(shell yq r metanorma.yml metanorma.source.files))

ifeq ($(SRC),null)
SRC :=
endif
ifeq ($(SRC),ll)
SRC :=
endif

ifeq ($(SRC),)
BUILT := $(subst ${ },${\n},$(shell yq r metanorma.yml metanorma.source.built_targets | cut -d ":" -f 1))

ifeq ($(BUILT),null)
SRC :=
endif
ifeq ($(BUILT),ll)
SRC :=
endif

ifeq ($(BUILT),)
SRC := $(filter-out README.adoc, $(wildcard sources/*.adoc))
else
XML := $(patsubst sources/%,documents/%,$(BUILT))
endif
endif

FORMATS := $(subst ${-},${ },$(strip $(shell yq r metanorma.yml metanorma.formats)))
ifeq ($(FORMATS),)
FORMAT_MARKER := mn-output-
FORMATS := $(shell grep "$(FORMAT_MARKER)" $(SRC) | cut -f 2 -d " " | tr "," "\n" | sort | uniq | tr "\n" " ")
endif

XML  ?= $(patsubst sources/%,documents/%,$(patsubst %.adoc,%.xml,$(SRC)))
HTML := $(patsubst %.xml,%.html,$(XML))

ifdef METANORMA_DOCKER
  PREFIX_CMD := echo "Running via docker..." & docker run -v "$$(pwd)":/metanorma/ $(METANORMA_DOCKER)

else
  PREFIX_CMD := echo "Running locally..." & bundle exec
endif

_OUT_FILES := $(foreach FORMAT,$(FORMATS),$(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))
OUT_FILES  := $(foreach F,$(_OUT_FILES),$($F))

all: documents.html
	echo "src $(SRC)"
	echo "xml $(XML)"
	echo "formats $(FORMATS)"

documents:
	setlocal enableextensions & md $@ & endlocal

documents/%.html: documents/%.xml | documents
	${PREFIX_CMD} metanorma $<

documents/%.xml: sources/%.xml | documents
	move $< $@

# Build canonical XML output
# If XML file is provided, copy it over
# Otherwise, build the xml using adoc
sources/%.xml: | bundle
	$(eval BUILT_TARGET := $(subst /,\,$(shell yq r metanorma.yml metanorma.source.built_targets[$@])))
	if NOT "$(BUILT_TARGET)" == "null" ( \
		if exist "$(BUILT_TARGET)" ( \
			if "$(suffix $(BUILT_TARGET))" == ".xml" ( \
				copy "$(BUILT_TARGET)" $@ \
			) else ( \
				$(PREFIX_CMD) metanorma $(BUILT_TARGET) & \
				copy "$(subst adoc,xml,${BUILT_TARGET})" $@ \
			) \
		) else ( \
			$(PREFIX_CMD) metanorma $(BUILT_TARGET) & \
			copy "$(subst adoc,xml,${BUILT_TARGET})" $@ \
		) \
	)

documents.rxl: $(XML) $(HTML)
	${PREFIX_CMD} relaton concatenate \
	  -t "$(shell yq r metanorma.yml relaton.collection.name)" \
		-g "$(shell yq r metanorma.yml relaton.collection.organization)" \
		documents $@

documents.html: documents.rxl
	$(PREFIX_CMD) relaton xml2html documents.rxl

%.adoc:

define FORMAT_TASKS
OUT_FILES-$(FORMAT) := $($(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))

open-$(FORMAT):
	open $$(OUT_FILES-$(FORMAT))

clean-$(FORMAT):
	rm -f $$(OUT_FILES-$(FORMAT))

$(FORMAT): clean-$(FORMAT) $$(OUT_FILES-$(FORMAT))

.PHONY: clean-$(FORMAT)

endef

$(foreach FORMAT,$(FORMATS),$(eval $(FORMAT_TASKS)))

open: open-html

clean:
	rm -rf $(OUT_FILES)
	del /q documents published
	del /q *_images
	del /q documents.*

bundle:
	IF "" == "%METANORMA_DOCKER%" bundle

.PHONY: bundle all open clean

#
# Watch-related jobs
#

.PHONY: watch serve watch-serve

NODE_BINS          := onchange live-serve run-p
NODE_BIN_DIR       := node_modules/.bin
NODE_PACKAGE_PATHS := $(foreach PACKAGE_NAME,$(NODE_BINS),$(NODE_BIN_DIR)/$(PACKAGE_NAME))

$(NODE_PACKAGE_PATHS): package.json
	npm i

watch: $(NODE_BIN_DIR)/onchange
	make all
	$< $(ALL_SRC) -- make all

define WATCH_TASKS
watch-$(FORMAT): $(NODE_BIN_DIR)/onchange
	make $(FORMAT)
	$$< $$(SRC_$(FORMAT)) -- make $(FORMAT)

.PHONY: watch-$(FORMAT)
endef

$(foreach FORMAT,$(FORMATS),$(eval $(WATCH_TASKS)))

ifndef PORT
override PORT = 8123
endif

serve: $(NODE_BIN_DIR)/live-server revealjs-css reveal.js
	set port=$(PORT) & \
	for /r %%html in $(HTML) do ( \
		$< --entry-file=%%html --port=%port% --ignore="*.html,*.xml,Makefile,Gemfile.*,package.*.json" --wait=1000 & \
		set /A port=%port%+1 \
	)

watch-serve: $(NODE_BIN_DIR)/run-p
	$< watch serve

#
# Deploy jobs
#

publish: published

published: documents.html
	setlocal enableextensions & md $@ & endlocal
	copy documents $@/
	copy $< $@/index.html
